# vim: syntax=sql
[auto_discovery_60]
minutes: 60
inst.lld: select distinct inst_name "{#INST_NAME}"
            from (select inst_name from v$active_instances 
                  union
                  select instance_name from gv$instance)
db.lld: select name "{#PDB}" from v$database
parm.lld: select i.instance_name "{#INST_NAME}", p.name "{#PARAMETER}"
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
p_ts.lld: select tablespace_name "{#TS_NAME}", '' "{#PDB}"
            from dba_tablespaces where contents = 'PERMANENT'
t_ts.lld: select tablespace_name "{#TS_NAME}", '' "{#PDB}"
            from dba_tablespaces where contents = 'TEMPORARY'
u_ts.lld: select tablespace_name "{#TS_NAME}", '' "{#PDB}"
            from dba_tablespaces where contents = 'UNDO'
expu.lld: select '' "{#PDB}", username "{#USERNAME}"
            from dba_users s
            where account_status IN ( 'OPEN', 'EXPIRED(GRACE)' )
            and expiry_date > sysdate
            and expiry_date < (sysdate + 30)
service.lld: select '' "{#PDB}", i.instance_name "{#INST_NAME}", s.name "{#SERVICE_NAME}"
               from gv$services s join gv$instance i
                 on (   s.inst_id = i.inst_id)
rman.lld: select distinct(object_type) "{#OBJ_TYPE}" from v$rman_status where operation like 'BACKUP%'
arl_dest.lld: select i.instance_name "{#INST_NAME}",d.dest_name "{#ARL_DEST}"
            from gv$archive_dest d
            , gv$instance i
            , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and   db.log_mode = 'ARCHIVELOG'
[startup]
minutes: 0
version: select 'inst['||instance_name||',version]', version from v$instance
lastpatch: select  'db[last_patch_hist]', ACTION||':'||NAMESPACE||':'||VERSION||':'||ID||':'||COMMENTS
        from sys.registry$history
        where action_time = (select max(action_time) from sys.registry$history)

[checks_01m]
minutes: 1
inst.uptime: select 'inst['||instance_name||',uptime]' key,(sysdate -startup_time)*60*60*24 val from gv$instance
db.openmode: select 'db['||name||',openstatus]', decode(open_mode,'MOUNTED',1,'READ ONLY',2,'READ WRITE',3,0) from v$database
scn: select 'db[current_scn]', current_scn from v$database
     union all
     select 'db[delta_scn]', current_scn from v$database

[checks_05m]
minutes: 5
parm.val:  select 'parm['||i.instance_name||','||p.name||',value]' key, p.value
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
            and   upper(p.description) not like '%SIZE%'
            union all
            select 'parm['||i.instance_name||','||p.name||',size]' key, p.value
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
            and   upper(p.description) like '%SIZE%'
service.cnt: select 'service[,'||i.instance_name||','|| s.service_name||',sess]' ,count(*)
               from gv$session s join gv$instance i
                 on (   s.inst_id = i.inst_id)
                 group by i.instance_name, s.service_name

u_ts: select 'u_ts[,'||t.tablespace_name||',filesize]' key, sum(f.bytes)
        from dba_data_files f, dba_tablespaces t
       where t.contents = 'UNDO'
         and t.tablespace_name = f.tablespace_name
       group by t.tablespace_name
       union all
       select 'u_ts[,'||t.tablespace_name||',maxsize]' key, sum(f.maxbytes)
        from (select case when autoextensible = 'NO'
                               then bytes
                     else
                      case when bytes > maxbytes
                               then bytes
                      else          maxbytes
                      end
                     end maxbytes, tablespace_name
                from dba_data_files) f
            , dba_tablespaces t
       where t.contents = 'UNDO'
         and  t.tablespace_name = f.tablespace_name
       group by t.tablespace_name
       union all
       select 'u_ts[,'||t.tablespace_name||',usedbytes]' key, sum(f.file_size) - sum(a.free_bytes) usedbytes
       from ( select tablespace_name, sum(bytes) file_size
               from dba_data_files
               group by tablespace_name
            ) f
        join dba_tablespaces t
          on ( f.tablespace_name = t.tablespace_name)
        left join (select tablespace_name, sum(bytes) free_bytes
        from dba_free_space group by tablespace_name) a
          on (    t.tablespace_name = a.tablespace_name
              and f.tablespace_name = a.tablespace_name)
        where t.contents = 'UNDO'
        group by t.tablespace_name
       union all
	 select 'u_ts[,'||t.tablespace_name||',pctfree]' key, round((sum(a.bytes) / sum(f.file_size)) * 100)
	 from
           ( select tablespace_name, sum(bytes) file_size
               from dba_data_files
               group by tablespace_name
            ) f
        join dba_tablespaces t
          on ( f.tablespace_name = t.tablespace_name)
        left join (select tablespace_name, sum(bytes) bytes
        from dba_free_space group by tablespace_name) a
          on (    t.tablespace_name = a.tablespace_name
              and f.tablespace_name = a.tablespace_name)
        where t.contents = 'UNDO'
        group by t.tablespace_name

t_ts: select   't_ts[,'||t.TABLESPACE||',filesize]', t.totalspace
    from (select   round (sum (d.bytes))  AS totalspace,
                   round (sum ( case when maxbytes < bytes then bytes else maxbytes end)) max_bytes,
									 d.tablespace_name tablespace
              from dba_temp_files d
          group by d.tablespace_name) t
   union all
   select   't_ts[,'||t.TABLESPACE_name||',maxsize]', sum(maxbytes)
        from (select case when autoextensible = 'NO'
                               then bytes
                     else
                      case when bytes > maxbytes
                               then bytes
                      else          maxbytes
                      end
                     end maxbytes, tablespace_name
                from dba_temp_files) f
            , dba_tablespaces t
       where t.contents = 'TEMPORARY'
         and  t.tablespace_name = f.tablespace_name
       group by t.tablespace_name
  union all
  select 't_ts[,'||t.tablespace_name||',usedbytes]', nvl(sum(u.blocks*t.block_size),0) bytes
    from gv$sort_usage u right join
       dba_tablespaces t
           on ( u.tablespace = t.tablespace_name)
             where   t.contents = 'TEMPORARY'
               group by t.tablespace_name
  union all
  select   't_ts[,'||t.TABLESPACE_name||',pctfree]', round(((t.totalspace - nvl(u.usedbytes,0))/t.totalspace)*100) "PCTFREE"
    from (select   round (sum (d.bytes))  AS totalspace,
                   round (sum ( case when maxbytes < bytes then bytes else maxbytes end)) max_bytes,
                   d.tablespace_name
              from dba_temp_files d
          group by d.tablespace_name) t
      left join (
                        select u.tablespace tablespace_name, round(sum(u.blocks*t.block_size)) usedbytes
                        from gv$sort_usage u
                        , dba_tablespaces t
                        where u.tablespace = t.tablespace_name
                        and   t.contents = 'TEMPORARY'
                        group by tablespace
                 )u
           on t.tablespace_name = u.tablespace_name
arl_dest: select 'arl_dest['|| i.instance_name||','||d.dest_name||',status]', ''||decode (d.status,'VALID',0,'DEFERRED',1,'ERROR',2,3)
            from gv$archive_dest d
            , gv$instance i
            , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and db.log_mode = 'ARCHIVELOG'
          union all
          select 'arl_dest['|| i.instance_name||','||d.dest_name||',sequence]', ''||d.log_sequence
            from gv$archive_dest d
            , gv$instance i
            , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and db.log_mode = 'ARCHIVELOG'
          union all
          select 'arl_dest['|| i.instance_name||','||d.dest_name||',error]', '"'||d.error||'"'
            from gv$archive_dest d
            , gv$instance i
                , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and db.log_mode = 'ARCHIVELOG'
[checks_60m]
minutes: 60
p_ts: select 'p_ts[,'||t.tablespace_name||',filesize]' key, sum(f.bytes)
        from dba_data_files f, dba_tablespaces t
       where t.contents = 'PERMANENT'
         and t.tablespace_name = f.tablespace_name
       group by t.tablespace_name
       union all
       select 'p_ts[,'||t.tablespace_name||',maxsize]' key, sum(f.maxbytes)
        from (select case when autoextensible = 'NO'
                               then bytes
                     else
                      case when bytes > maxbytes
                               then bytes
                      else          maxbytes
                      end
                     end maxbytes, tablespace_name
                from dba_data_files) f
            , dba_tablespaces t
       where t.contents = 'PERMANENT'
         and  t.tablespace_name = f.tablespace_name
       group by t.tablespace_name
       union all
       select 'p_ts[,'||t.tablespace_name||',usedbytes]' key, sum(f.file_size) - sum(a.free_bytes) usedbytes
       from ( select tablespace_name, sum(bytes) file_size
               from dba_data_files
               group by tablespace_name
            ) f
        join dba_tablespaces t
          on ( f.tablespace_name = t.tablespace_name)
        left join (select tablespace_name, sum(bytes) free_bytes
        from dba_free_space group by tablespace_name) a
          on (    t.tablespace_name = a.tablespace_name
              and f.tablespace_name = a.tablespace_name)
        where t.contents = 'PERMANENT'
        group by t.tablespace_name
       union all
	 select 'p_ts[,'||t.tablespace_name||',pctfree]' key, round((sum(a.bytes) / sum(f.file_size)) * 100)
	 from
           ( select tablespace_name, sum(bytes) file_size
               from dba_data_files
               group by tablespace_name
            ) f
        join dba_tablespaces t
          on ( f.tablespace_name = t.tablespace_name)
        left join (select tablespace_name, sum(bytes) bytes
        from dba_free_space group by tablespace_name) a
          on (    t.tablespace_name = a.tablespace_name
              and f.tablespace_name = a.tablespace_name)
        where t.contents = 'PERMANENT'
        group by t.tablespace_name

expu: select 'expu[,'|| username||',expiring]' key, (expiry_date - sysdate)*24*3600 value
	from dba_users s
	where account_status IN ( 'OPEN', 'EXPIRED(GRACE)' )
	and expiry_date > sysdate
	and expiry_date < (sysdate + 30)

rman: with stats as (
        select r.object_type, r.operation, r.start_time, r.end_time, r.status
               ,max(start_time) over (partition by  r.object_type, r.operation) max_start
               , input_bytes, output_bytes
        from v$rman_status r
        where r.row_type = 'COMMAND'
        and   not r.object_type is null
        and   r.operation like 'BACKUP%'
        )
        , types as (
        select 'ARCHIVELOG' object_type from dual
        union all
        select 'CONTROLFILE' from dual
        union all
        select 'SPFILE' from dual
        union all
        select 'DB INCR' from dual
        union all
        select 'DB FULL' from dual
        union all
        select 'RECVR AREA' from dual
        )
        , data as (
        select t.object_type, s.start_time, nvl(s.status,'noinfo') status, round(nvl((s.end_time - s.start_time),0)*24*60*60) elapsed
        , nvl(input_bytes,0) input_bytes, nvl(output_bytes,0) output_bytes
        from types t left outer join
             stats s on (s.object_type = t.object_type)
        where nvl(s.start_time,sysdate) = nvl(s.max_start,sysdate)
        )
        select '"rman['||object_type||',status]"', decode(status,'COMPLETED',0,
                                               'FAILED',   1,
                                               'COMPLETED WITH WARNINGS',2,
                                               'COMPLETED WITH ERRORS',  3,
                                               'noinfo',                 4,
                                               'RUNNING',                5,
                                               9) status
        from data
        union all
        select '"rman['||object_type||',ela]"',elapsed
        from data
        union all
        select '"rman['||object_type||',input]"',input_bytes
        from data
        union all
        select '"rman['||object_type||',output]"',output_bytes
        from data
        union all
        select '"rman['||object_type||',age]"',round((sysdate - nvl(start_time,sysdate))*24*3600) age
        from data
